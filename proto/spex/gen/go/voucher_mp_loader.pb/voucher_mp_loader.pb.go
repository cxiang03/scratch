// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: voucher_mp_loader.proto

/*
Package voucher_mp_loader is a generated protocol buffer package.

It is generated from these files:

	voucher_mp_loader.proto

It has these top-level messages:

	Constant
	RequestMeta
	RequestMetaV2
	ResponseMeta
	ResponseMetaV2
	Cookie
	CookieV2
*/
package voucher_mp_loader

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Constant_ErrorCode int32

const (
	Constant_ERROR_UNKNOWN           Constant_ErrorCode = 342500000
	Constant_ERROR_PARAM             Constant_ErrorCode = 342500001
	Constant_ERROR_NOT_FOUND         Constant_ErrorCode = 342500002
	Constant_ERROR_DUPLICATE         Constant_ErrorCode = 342500003
	Constant_ERROR_LOCK              Constant_ErrorCode = 342500004
	Constant_ERROR_DUPLICATE_REQUEST Constant_ErrorCode = 342500005
	Constant_ERROR_BATCH_SIZE        Constant_ErrorCode = 342500006
	Constant_ERROR_DATABASE          Constant_ErrorCode = 342500100
	Constant_ERROR_CACHE             Constant_ErrorCode = 342500101
	Constant_ERROR_QUEUE             Constant_ErrorCode = 342500102
	Constant_ERROR_EXTERNAL_SERVICE  Constant_ErrorCode = 342500103
)

var Constant_ErrorCode_name = map[int32]string{
	342500000: "ERROR_UNKNOWN",
	342500001: "ERROR_PARAM",
	342500002: "ERROR_NOT_FOUND",
	342500003: "ERROR_DUPLICATE",
	342500004: "ERROR_LOCK",
	342500005: "ERROR_DUPLICATE_REQUEST",
	342500006: "ERROR_BATCH_SIZE",
	342500100: "ERROR_DATABASE",
	342500101: "ERROR_CACHE",
	342500102: "ERROR_QUEUE",
	342500103: "ERROR_EXTERNAL_SERVICE",
}
var Constant_ErrorCode_value = map[string]int32{
	"ERROR_UNKNOWN":           342500000,
	"ERROR_PARAM":             342500001,
	"ERROR_NOT_FOUND":         342500002,
	"ERROR_DUPLICATE":         342500003,
	"ERROR_LOCK":              342500004,
	"ERROR_DUPLICATE_REQUEST": 342500005,
	"ERROR_BATCH_SIZE":        342500006,
	"ERROR_DATABASE":          342500100,
	"ERROR_CACHE":             342500101,
	"ERROR_QUEUE":             342500102,
	"ERROR_EXTERNAL_SERVICE":  342500103,
}

func (x Constant_ErrorCode) Enum() *Constant_ErrorCode {
	p := new(Constant_ErrorCode)
	*p = x
	return p
}
func (x Constant_ErrorCode) String() string {
	return proto.EnumName(Constant_ErrorCode_name, int32(x))
}
func (x *Constant_ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_ErrorCode_value, data, "Constant_ErrorCode")
	if err != nil {
		return err
	}
	*x = Constant_ErrorCode(value)
	return nil
}
func (Constant_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorVoucherMpLoader, []int{0, 0}
}

type Constant_CallerSource int32

const (
	Constant_CALLER_SOURCE_UNKNOWN                 Constant_CallerSource = 0
	Constant_CALLER_SOURCE_VOUCHER_CORE            Constant_CallerSource = 1
	Constant_CALLER_SOURCE_VOUCHER_COREV2          Constant_CallerSource = 2
	Constant_CALLER_SOURCE_VOUCHER_EVENT           Constant_CallerSource = 3
	Constant_CALLER_SOURCE_VOUCHER_TASK            Constant_CallerSource = 4
	Constant_CALLER_SOURCE_VOUCHER_MP_DISTRIBUTION Constant_CallerSource = 5
	Constant_CALLER_SOURCE_VOUCHER_MP_USAGE        Constant_CallerSource = 6
	Constant_CALLER_SOURCE_VOUCHER_MP_QUERY        Constant_CallerSource = 7
	Constant_CALLER_SOURCE_VOUCHER_LABEL           Constant_CallerSource = 8
)

var Constant_CallerSource_name = map[int32]string{
	0: "CALLER_SOURCE_UNKNOWN",
	1: "CALLER_SOURCE_VOUCHER_CORE",
	2: "CALLER_SOURCE_VOUCHER_COREV2",
	3: "CALLER_SOURCE_VOUCHER_EVENT",
	4: "CALLER_SOURCE_VOUCHER_TASK",
	5: "CALLER_SOURCE_VOUCHER_MP_DISTRIBUTION",
	6: "CALLER_SOURCE_VOUCHER_MP_USAGE",
	7: "CALLER_SOURCE_VOUCHER_MP_QUERY",
	8: "CALLER_SOURCE_VOUCHER_LABEL",
}
var Constant_CallerSource_value = map[string]int32{
	"CALLER_SOURCE_UNKNOWN":                 0,
	"CALLER_SOURCE_VOUCHER_CORE":            1,
	"CALLER_SOURCE_VOUCHER_COREV2":          2,
	"CALLER_SOURCE_VOUCHER_EVENT":           3,
	"CALLER_SOURCE_VOUCHER_TASK":            4,
	"CALLER_SOURCE_VOUCHER_MP_DISTRIBUTION": 5,
	"CALLER_SOURCE_VOUCHER_MP_USAGE":        6,
	"CALLER_SOURCE_VOUCHER_MP_QUERY":        7,
	"CALLER_SOURCE_VOUCHER_LABEL":           8,
}

func (x Constant_CallerSource) Enum() *Constant_CallerSource {
	p := new(Constant_CallerSource)
	*p = x
	return p
}
func (x Constant_CallerSource) String() string {
	return proto.EnumName(Constant_CallerSource_name, int32(x))
}
func (x *Constant_CallerSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constant_CallerSource_value, data, "Constant_CallerSource")
	if err != nil {
		return err
	}
	*x = Constant_CallerSource(value)
	return nil
}
func (Constant_CallerSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorVoucherMpLoader, []int{0, 1}
}

type Constant struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Constant) Reset()                    { *m = Constant{} }
func (m *Constant) String() string            { return proto.CompactTextString(m) }
func (*Constant) ProtoMessage()               {}
func (*Constant) Descriptor() ([]byte, []int) { return fileDescriptorVoucherMpLoader, []int{0} }

type RequestMeta struct {
	CallerSource     *uint32       `protobuf:"varint,1,opt,name=caller_source,json=callerSource" json:"caller_source"`
	RequestId        *string       `protobuf:"bytes,2,opt,name=request_id,json=requestId" json:"request_id"`
	CallerCmd        *string       `protobuf:"bytes,3,opt,name=caller_cmd,json=callerCmd" json:"caller_cmd"`
	ResponseMeta     *ResponseMeta `protobuf:"bytes,4,opt,name=response_meta,json=responseMeta" json:"response_meta"`
	Cookies          []*Cookie     `protobuf:"bytes,5,rep,name=cookies" json:"cookies"`
	CallerIp         *string       `protobuf:"bytes,6,opt,name=caller_ip,json=callerIp" json:"caller_ip"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *RequestMeta) Reset()                    { *m = RequestMeta{} }
func (m *RequestMeta) String() string            { return proto.CompactTextString(m) }
func (*RequestMeta) ProtoMessage()               {}
func (*RequestMeta) Descriptor() ([]byte, []int) { return fileDescriptorVoucherMpLoader, []int{1} }

func (m *RequestMeta) GetCallerSource() uint32 {
	if m != nil && m.CallerSource != nil {
		return *m.CallerSource
	}
	return 0
}

func (m *RequestMeta) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

func (m *RequestMeta) GetCallerCmd() string {
	if m != nil && m.CallerCmd != nil {
		return *m.CallerCmd
	}
	return ""
}

func (m *RequestMeta) GetResponseMeta() *ResponseMeta {
	if m != nil {
		return m.ResponseMeta
	}
	return nil
}

func (m *RequestMeta) GetCookies() []*Cookie {
	if m != nil {
		return m.Cookies
	}
	return nil
}

func (m *RequestMeta) GetCallerIp() string {
	if m != nil && m.CallerIp != nil {
		return *m.CallerIp
	}
	return ""
}

type RequestMetaV2 struct {
	CallerSource     *uint32         `protobuf:"varint,2,opt,name=caller_source,json=callerSource" json:"caller_source"`
	RequestId        *string         `protobuf:"bytes,3,opt,name=request_id,json=requestId" json:"request_id"`
	CallerCmd        *string         `protobuf:"bytes,4,opt,name=caller_cmd,json=callerCmd" json:"caller_cmd"`
	ResponseMeta     *ResponseMetaV2 `protobuf:"bytes,5,opt,name=response_meta,json=responseMeta" json:"response_meta"`
	Cookies          []*CookieV2     `protobuf:"bytes,6,rep,name=cookies" json:"cookies"`
	CallerIq         *string         `protobuf:"bytes,7,opt,name=caller_iq,json=callerIq" json:"caller_iq"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RequestMetaV2) Reset()                    { *m = RequestMetaV2{} }
func (m *RequestMetaV2) String() string            { return proto.CompactTextString(m) }
func (*RequestMetaV2) ProtoMessage()               {}
func (*RequestMetaV2) Descriptor() ([]byte, []int) { return fileDescriptorVoucherMpLoader, []int{2} }

func (m *RequestMetaV2) GetCallerSource() uint32 {
	if m != nil && m.CallerSource != nil {
		return *m.CallerSource
	}
	return 0
}

func (m *RequestMetaV2) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

func (m *RequestMetaV2) GetCallerCmd() string {
	if m != nil && m.CallerCmd != nil {
		return *m.CallerCmd
	}
	return ""
}

func (m *RequestMetaV2) GetResponseMeta() *ResponseMetaV2 {
	if m != nil {
		return m.ResponseMeta
	}
	return nil
}

func (m *RequestMetaV2) GetCookies() []*CookieV2 {
	if m != nil {
		return m.Cookies
	}
	return nil
}

func (m *RequestMetaV2) GetCallerIq() string {
	if m != nil && m.CallerIq != nil {
		return *m.CallerIq
	}
	return ""
}

type ResponseMeta struct {
	ErrorCode        *int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code"`
	DebugMessage     *string `protobuf:"bytes,2,opt,name=debug_message,json=debugMessage" json:"debug_message"`
	InvalidIds       []int32 `protobuf:"varint,3,rep,name=invalid_ids,json=invalidIds" json:"invalid_ids"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResponseMeta) Reset()                    { *m = ResponseMeta{} }
func (m *ResponseMeta) String() string            { return proto.CompactTextString(m) }
func (*ResponseMeta) ProtoMessage()               {}
func (*ResponseMeta) Descriptor() ([]byte, []int) { return fileDescriptorVoucherMpLoader, []int{3} }

func (m *ResponseMeta) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *ResponseMeta) GetDebugMessage() string {
	if m != nil && m.DebugMessage != nil {
		return *m.DebugMessage
	}
	return ""
}

func (m *ResponseMeta) GetInvalidIds() []int32 {
	if m != nil {
		return m.InvalidIds
	}
	return nil
}

type ResponseMetaV2 struct {
	DebugMessage     *string `protobuf:"bytes,1,opt,name=debug_message,json=debugMessage" json:"debug_message"`
	ErrorCode        *int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code"`
	InvalidIds       []int32 `protobuf:"varint,3,rep,name=invalid_ids,json=invalidIds" json:"invalid_ids"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResponseMetaV2) Reset()                    { *m = ResponseMetaV2{} }
func (m *ResponseMetaV2) String() string            { return proto.CompactTextString(m) }
func (*ResponseMetaV2) ProtoMessage()               {}
func (*ResponseMetaV2) Descriptor() ([]byte, []int) { return fileDescriptorVoucherMpLoader, []int{4} }

func (m *ResponseMetaV2) GetDebugMessage() string {
	if m != nil && m.DebugMessage != nil {
		return *m.DebugMessage
	}
	return ""
}

func (m *ResponseMetaV2) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *ResponseMetaV2) GetInvalidIds() []int32 {
	if m != nil {
		return m.InvalidIds
	}
	return nil
}

type Cookie struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Cookie) Reset()                    { *m = Cookie{} }
func (m *Cookie) String() string            { return proto.CompactTextString(m) }
func (*Cookie) ProtoMessage()               {}
func (*Cookie) Descriptor() ([]byte, []int) { return fileDescriptorVoucherMpLoader, []int{5} }

func (m *Cookie) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Cookie) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CookieV2 struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CookieV2) Reset()                    { *m = CookieV2{} }
func (m *CookieV2) String() string            { return proto.CompactTextString(m) }
func (*CookieV2) ProtoMessage()               {}
func (*CookieV2) Descriptor() ([]byte, []int) { return fileDescriptorVoucherMpLoader, []int{6} }

func (m *CookieV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CookieV2) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Constant)(nil), "voucher.mp.loader.Constant")
	proto.RegisterType((*RequestMeta)(nil), "voucher.mp.loader.RequestMeta")
	proto.RegisterType((*RequestMetaV2)(nil), "voucher.mp.loader.RequestMetaV2")
	proto.RegisterType((*ResponseMeta)(nil), "voucher.mp.loader.ResponseMeta")
	proto.RegisterType((*ResponseMetaV2)(nil), "voucher.mp.loader.ResponseMetaV2")
	proto.RegisterType((*Cookie)(nil), "voucher.mp.loader.Cookie")
	proto.RegisterType((*CookieV2)(nil), "voucher.mp.loader.CookieV2")
	proto.RegisterEnum("voucher.mp.loader.Constant_ErrorCode", Constant_ErrorCode_name, Constant_ErrorCode_value)
	proto.RegisterEnum("voucher.mp.loader.Constant_CallerSource", Constant_CallerSource_name, Constant_CallerSource_value)
}
func (m *Constant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Constant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CallerSource != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(*m.CallerSource))
	}
	if m.RequestId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.RequestId)))
		i += copy(dAtA[i:], *m.RequestId)
	}
	if m.CallerCmd != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.CallerCmd)))
		i += copy(dAtA[i:], *m.CallerCmd)
	}
	if m.ResponseMeta != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(m.ResponseMeta.Size()))
		n1, err := m.ResponseMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Cookies) > 0 {
		for _, msg := range m.Cookies {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVoucherMpLoader(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CallerIp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.CallerIp)))
		i += copy(dAtA[i:], *m.CallerIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestMetaV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMetaV2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CallerSource != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(*m.CallerSource))
	}
	if m.RequestId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.RequestId)))
		i += copy(dAtA[i:], *m.RequestId)
	}
	if m.CallerCmd != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.CallerCmd)))
		i += copy(dAtA[i:], *m.CallerCmd)
	}
	if m.ResponseMeta != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(m.ResponseMeta.Size()))
		n2, err := m.ResponseMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Cookies) > 0 {
		for _, msg := range m.Cookies {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVoucherMpLoader(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CallerIq != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.CallerIq)))
		i += copy(dAtA[i:], *m.CallerIq)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResponseMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(*m.ErrorCode))
	}
	if m.DebugMessage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.DebugMessage)))
		i += copy(dAtA[i:], *m.DebugMessage)
	}
	if len(m.InvalidIds) > 0 {
		for _, num := range m.InvalidIds {
			dAtA[i] = 0x18
			i++
			i = encodeVarintVoucherMpLoader(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResponseMetaV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMetaV2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.DebugMessage)))
		i += copy(dAtA[i:], *m.DebugMessage)
	}
	if m.ErrorCode != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(*m.ErrorCode))
	}
	if len(m.InvalidIds) > 0 {
		for _, num := range m.InvalidIds {
			dAtA[i] = 0x18
			i++
			i = encodeVarintVoucherMpLoader(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Cookie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cookie) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CookieV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CookieV2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoucherMpLoader(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintVoucherMpLoader(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Constant) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestMeta) Size() (n int) {
	var l int
	_ = l
	if m.CallerSource != nil {
		n += 1 + sovVoucherMpLoader(uint64(*m.CallerSource))
	}
	if m.RequestId != nil {
		l = len(*m.RequestId)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.CallerCmd != nil {
		l = len(*m.CallerCmd)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.ResponseMeta != nil {
		l = m.ResponseMeta.Size()
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if len(m.Cookies) > 0 {
		for _, e := range m.Cookies {
			l = e.Size()
			n += 1 + l + sovVoucherMpLoader(uint64(l))
		}
	}
	if m.CallerIp != nil {
		l = len(*m.CallerIp)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestMetaV2) Size() (n int) {
	var l int
	_ = l
	if m.CallerSource != nil {
		n += 1 + sovVoucherMpLoader(uint64(*m.CallerSource))
	}
	if m.RequestId != nil {
		l = len(*m.RequestId)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.CallerCmd != nil {
		l = len(*m.CallerCmd)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.ResponseMeta != nil {
		l = m.ResponseMeta.Size()
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if len(m.Cookies) > 0 {
		for _, e := range m.Cookies {
			l = e.Size()
			n += 1 + l + sovVoucherMpLoader(uint64(l))
		}
	}
	if m.CallerIq != nil {
		l = len(*m.CallerIq)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseMeta) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != nil {
		n += 1 + sovVoucherMpLoader(uint64(*m.ErrorCode))
	}
	if m.DebugMessage != nil {
		l = len(*m.DebugMessage)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if len(m.InvalidIds) > 0 {
		for _, e := range m.InvalidIds {
			n += 1 + sovVoucherMpLoader(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseMetaV2) Size() (n int) {
	var l int
	_ = l
	if m.DebugMessage != nil {
		l = len(*m.DebugMessage)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.ErrorCode != nil {
		n += 1 + sovVoucherMpLoader(uint64(*m.ErrorCode))
	}
	if len(m.InvalidIds) > 0 {
		for _, e := range m.InvalidIds {
			n += 1 + sovVoucherMpLoader(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cookie) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CookieV2) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovVoucherMpLoader(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVoucherMpLoader(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVoucherMpLoader(x uint64) (n int) {
	return sovVoucherMpLoader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Constant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoucherMpLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Constant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Constant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVoucherMpLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoucherMpLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerSource", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CallerSource = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RequestId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerCmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CallerCmd = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseMeta == nil {
				m.ResponseMeta = &ResponseMeta{}
			}
			if err := m.ResponseMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookies = append(m.Cookies, &Cookie{})
			if err := m.Cookies[len(m.Cookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CallerIp = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoucherMpLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMetaV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoucherMpLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMetaV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMetaV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerSource", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CallerSource = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RequestId = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerCmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CallerCmd = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseMeta == nil {
				m.ResponseMeta = &ResponseMetaV2{}
			}
			if err := m.ResponseMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookies = append(m.Cookies, &CookieV2{})
			if err := m.Cookies[len(m.Cookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerIq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CallerIq = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoucherMpLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoucherMpLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMessage = &s
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoucherMpLoader
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InvalidIds = append(m.InvalidIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoucherMpLoader
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVoucherMpLoader
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVoucherMpLoader
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InvalidIds = append(m.InvalidIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoucherMpLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMetaV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoucherMpLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMetaV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMetaV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DebugMessage = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCode = &v
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoucherMpLoader
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InvalidIds = append(m.InvalidIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoucherMpLoader
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVoucherMpLoader
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVoucherMpLoader
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InvalidIds = append(m.InvalidIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoucherMpLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cookie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoucherMpLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cookie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cookie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoucherMpLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CookieV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoucherMpLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CookieV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CookieV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoucherMpLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoucherMpLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoucherMpLoader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoucherMpLoader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoucherMpLoader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVoucherMpLoader
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVoucherMpLoader
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVoucherMpLoader(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVoucherMpLoader = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoucherMpLoader   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("voucher_mp_loader.proto", fileDescriptorVoucherMpLoader) }

var fileDescriptorVoucherMpLoader = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcb, 0x72, 0xd3, 0x48,
	0x14, 0x86, 0x23, 0xf9, 0x92, 0xf8, 0xd8, 0xce, 0xf4, 0xf4, 0x4c, 0x12, 0x65, 0x32, 0x63, 0x7b,
	0x94, 0x9a, 0x2a, 0xcf, 0xc6, 0x0b, 0x03, 0x0f, 0x20, 0xcb, 0x1d, 0xa2, 0x8a, 0x2d, 0x25, 0x2d,
	0xc9, 0x5c, 0x36, 0x5d, 0xc2, 0xea, 0x0a, 0x2e, 0x6c, 0xcb, 0x91, 0xec, 0x3c, 0x01, 0xb7, 0x15,
	0x6b, 0x8a, 0x15, 0x10, 0xa0, 0x78, 0x0c, 0x36, 0x50, 0x2c, 0x79, 0x04, 0x2a, 0xec, 0x78, 0x0a,
	0xca, 0x92, 0x12, 0x6c, 0xc7, 0x4e, 0xd8, 0xa9, 0xff, 0xff, 0x3f, 0x7d, 0x4e, 0x7f, 0xd5, 0x6a,
	0xd8, 0x38, 0xf6, 0x46, 0xed, 0xfb, 0xdc, 0x67, 0xbd, 0x01, 0xeb, 0x7a, 0x8e, 0xcb, 0xfd, 0xca,
	0xc0, 0xf7, 0x86, 0x1e, 0xfe, 0x3d, 0x36, 0x2a, 0xbd, 0x41, 0x25, 0x32, 0xe4, 0xef, 0x49, 0x58,
	0x51, 0xbd, 0x7e, 0x30, 0x74, 0xfa, 0x43, 0xf9, 0x85, 0x08, 0x19, 0xe2, 0xfb, 0x9e, 0xaf, 0x7a,
	0x2e, 0xc7, 0x6b, 0x90, 0x27, 0x94, 0x1a, 0x94, 0xd9, 0xfa, 0x9e, 0x6e, 0xdc, 0xd2, 0xd1, 0xcb,
	0x8f, 0xef, 0x4f, 0x04, 0xfc, 0x07, 0x64, 0x23, 0x79, 0x5f, 0xa1, 0x4a, 0x13, 0xbd, 0x0a, 0xc5,
	0x0d, 0xf8, 0x2d, 0x12, 0x75, 0xc3, 0x62, 0x3b, 0x86, 0xad, 0xd7, 0xd1, 0xeb, 0x69, 0xa3, 0x6e,
	0xef, 0x37, 0x34, 0x55, 0xb1, 0x08, 0x3a, 0x09, 0x0d, 0x0c, 0x10, 0x19, 0x0d, 0x43, 0xdd, 0x43,
	0x6f, 0x42, 0xad, 0x08, 0x1b, 0x33, 0x61, 0x46, 0xc9, 0x81, 0x4d, 0x4c, 0x0b, 0xbd, 0x0d, 0x03,
	0x12, 0xa0, 0x28, 0x50, 0x53, 0x2c, 0x75, 0x97, 0x99, 0xda, 0x5d, 0x82, 0xde, 0x85, 0xce, 0x3a,
	0xac, 0xc6, 0xa5, 0x8a, 0xa5, 0xd4, 0x14, 0x93, 0xa0, 0x87, 0x9f, 0xa6, 0xa6, 0x55, 0x15, 0x75,
	0x97, 0xa0, 0x47, 0xd3, 0xe2, 0x81, 0x4d, 0x6c, 0x82, 0x1e, 0x87, 0x62, 0x01, 0xd6, 0x23, 0x91,
	0xdc, 0xb6, 0x08, 0xd5, 0x95, 0x06, 0x33, 0x09, 0x6d, 0x69, 0x2a, 0x41, 0x4f, 0xc6, 0xbe, 0xfc,
	0x41, 0x84, 0x9c, 0xea, 0x74, 0xbb, 0xdc, 0x37, 0xbd, 0x91, 0xdf, 0xe6, 0x78, 0x13, 0xd6, 0x54,
	0xa5, 0xd1, 0x20, 0x94, 0x99, 0x86, 0x4d, 0x55, 0x72, 0xce, 0x69, 0x09, 0x17, 0xe0, 0xaf, 0x69,
	0xab, 0x65, 0xd8, 0xea, 0x2e, 0xa1, 0x4c, 0x35, 0x28, 0x41, 0x02, 0x2e, 0xc1, 0xdf, 0x8b, 0xfd,
	0x56, 0x15, 0x89, 0xb8, 0x08, 0x5b, 0xf3, 0x13, 0xa4, 0x45, 0x74, 0x0b, 0x25, 0x16, 0xb7, 0xb0,
	0x14, 0x73, 0x0f, 0x25, 0xf1, 0xff, 0xf0, 0xdf, 0x7c, 0xbf, 0xb9, 0xcf, 0xea, 0x9a, 0x69, 0x51,
	0xad, 0x66, 0x5b, 0x9a, 0xa1, 0xa3, 0x14, 0x96, 0xa1, 0xb0, 0x30, 0x6a, 0x9b, 0xca, 0x4d, 0x82,
	0xd2, 0x97, 0x66, 0x0e, 0x6c, 0x42, 0xef, 0xa0, 0xe5, 0xc5, 0x33, 0x37, 0x94, 0x1a, 0x69, 0xa0,
	0x15, 0xf9, 0xa9, 0x08, 0x59, 0xca, 0x8f, 0x46, 0x3c, 0x18, 0x36, 0xf9, 0xd0, 0xc1, 0xdb, 0x90,
	0x6f, 0x87, 0x44, 0x59, 0x10, 0x22, 0x95, 0x84, 0x92, 0x50, 0xce, 0xd3, 0x5c, 0x7b, 0x12, 0xf3,
	0x3f, 0x00, 0x7e, 0x54, 0xc3, 0x3a, 0xae, 0x24, 0x96, 0x84, 0x72, 0x86, 0x66, 0x62, 0x45, 0x73,
	0xc7, 0x76, 0xbc, 0x47, 0xbb, 0xe7, 0x4a, 0x89, 0xc8, 0x8e, 0x14, 0xb5, 0xe7, 0xe2, 0x3a, 0xe4,
	0x7d, 0x1e, 0x0c, 0xbc, 0x7e, 0xc0, 0x59, 0x8f, 0x0f, 0x1d, 0x29, 0x59, 0x12, 0xca, 0xd9, 0x6a,
	0xb1, 0x72, 0xe1, 0x57, 0xa8, 0xd0, 0x38, 0x37, 0x1e, 0x8d, 0xe6, 0xfc, 0x89, 0x15, 0xbe, 0x06,
	0xcb, 0x6d, 0xcf, 0x7b, 0xd0, 0xe1, 0x81, 0x94, 0x2a, 0x25, 0xca, 0xd9, 0xea, 0xe6, 0x9c, 0x7a,
	0x35, 0x4c, 0xd0, 0xb3, 0x24, 0xde, 0x82, 0x78, 0x0e, 0xd6, 0x19, 0x48, 0xe9, 0x70, 0xb0, 0x95,
	0x48, 0xd0, 0x06, 0xf2, 0x33, 0x11, 0xf2, 0x13, 0x28, 0x5a, 0xd5, 0x8b, 0x30, 0xc4, 0x2b, 0x61,
	0x24, 0x2e, 0x87, 0x91, 0x9c, 0x85, 0xb1, 0x33, 0x0b, 0x23, 0x15, 0xc2, 0xf8, 0xf7, 0x0a, 0x18,
	0xad, 0xea, 0x0c, 0x8e, 0x1b, 0x3f, 0x71, 0xa4, 0x43, 0x1c, 0x5b, 0x0b, 0x71, 0xb4, 0xaa, 0x73,
	0x81, 0x1c, 0x49, 0xcb, 0x53, 0x40, 0x8e, 0xe4, 0x00, 0x72, 0x93, 0x3d, 0xc7, 0x47, 0xe1, 0xe3,
	0xa7, 0x88, 0xb5, 0x3d, 0x37, 0xba, 0x18, 0x29, 0x9a, 0xe1, 0xe7, 0x8f, 0xd3, 0x36, 0xe4, 0x5d,
	0x7e, 0x6f, 0x74, 0xc8, 0x7a, 0x3c, 0x08, 0x9c, 0x43, 0x1e, 0x5f, 0x8c, 0x5c, 0x28, 0x36, 0x23,
	0x0d, 0x17, 0x21, 0xdb, 0xe9, 0x1f, 0x3b, 0xdd, 0x8e, 0xcb, 0x3a, 0x6e, 0x20, 0x25, 0x4a, 0x89,
	0x72, 0x8a, 0x42, 0x2c, 0x69, 0x6e, 0x20, 0x8f, 0x60, 0x75, 0xfa, 0xa0, 0x17, 0xf7, 0x15, 0xe6,
	0xec, 0x3b, 0x3d, 0x9b, 0x38, 0x3b, 0xdb, 0x95, 0x6d, 0xab, 0x90, 0x8e, 0xe8, 0x60, 0x0c, 0xc9,
	0xbe, 0xd3, 0x3b, 0xeb, 0x12, 0x7e, 0xe3, 0x3f, 0x21, 0x75, 0xec, 0x74, 0x47, 0x67, 0x47, 0x8a,
	0x16, 0xf2, 0xf5, 0xf1, 0x3b, 0x1d, 0x11, 0xfd, 0xf5, 0xaa, 0x1a, 0xfa, 0x7c, 0x5a, 0x10, 0xbe,
	0x9c, 0x16, 0x84, 0xaf, 0xa7, 0x05, 0xe1, 0xf9, 0xb7, 0xc2, 0xd2, 0x8f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb7, 0x90, 0x78, 0x2a, 0x1d, 0x06, 0x00, 0x00,
}
